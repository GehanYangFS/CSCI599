for SwitchDronesLight:
	1.  root : AirSim/blob/main/Unreal/Plugins/AirSim/Source/WorldSimApi.h:
		add code: virtual bool switchDronesLight(const std::string& light_name);
	2.  root : AirSim/blob/main/Unreal/Plugins/AirSim/Source/WorldSimApi.cpp
		add code : 
 			bool WorldSimApi::switchDronesLight(const std::string& light_name)
{
    bool result = false;
    UAirBlueprintLib::RunCommandOnGameThread([this, &light_name,  &result]() {
        AActor* light_actor = simmode_->scene_object_map.FindRef(FString(light_name.c_str()));

        if (light_actor) {
            const FString command = FString::Printf(TEXT("lightOpen"));
            FOutputDeviceNull ar;
            result = light_actor->CallFunctionByNameWithArguments(*command, ar, nullptr, true);
        }
    },
                                             true);
    return result;
}
	3. root :AirSim/blob/main/AirLib/src/api/RpcLibServerBase.cpp
		add code : pimpl_->server.bind("cancelLastTask", [&](const std::string& vehicle_name) -> void {
            getVehicleApi(vehicle_name)->cancelLastTask();
        });
	4. root : AirSim/blob/main/AirLib/include/api/WorldSimApiBase.hpp
		add code : virtual bool switchDronesLight(const std::string& light_name) = 0;
	5. add def simSwapTextures(self, tags, tex_id = 0, component_id = 0, material_id = 0): 
		return self.client.call("simSwapTextures", tags, tex_id, component_id, material_id)
	6. rebuild airsim